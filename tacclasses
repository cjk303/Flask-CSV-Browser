import os
import shutil
import subprocess
from datetime import datetime

CONFIG_PATH = "/etc/tacacs/tac_plus.conf"
BACKUP_DIR = "/etc/tacacs/backups"

def ensure_backup_dir():
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR, exist_ok=True)

def read_config():
    """Read the current TACACS+ config file and return its content."""
    with open(CONFIG_PATH, 'r') as f:
        return f.read()

def write_config(new_content):
    """
    Backup current config and overwrite with new_content.
    Return True on success, False otherwise.
    """
    try:
        ensure_backup_dir()

        # Backup current config with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(BACKUP_DIR, f"tac_plus.conf.bak_{timestamp}")
        shutil.copy2(CONFIG_PATH, backup_file)

        # Write new config
        with open(CONFIG_PATH, 'w') as f:
            f.write(new_content)

        return True
    except Exception as e:
        print(f"Error writing config: {e}")
        return False

def list_backups():
    """Return list of backup filenames sorted descending by creation time."""
    if not os.path.exists(BACKUP_DIR):
        return []

    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith("tac_plus.conf.bak_")]
    backups.sort(reverse=True)
    return backups

def read_backup(filename):
    """Read content of a backup file."""
    backup_path = os.path.join(BACKUP_DIR, filename)
    if not os.path.exists(backup_path):
        return None
    with open(backup_path, 'r') as f:
        return f.read()

def validate_config():
    """
    Validate the TACACS+ config by running tac_plus with -t option.
    Returns (bool is_valid, output str).
    """
    try:
        # tac_plus -t tests the config for syntax errors
        result = subprocess.run(['tac_plus', '-t', '-f', CONFIG_PATH], capture_output=True, text=True)
        is_valid = (result.returncode == 0)
        output = result.stdout + result.stderr
        return is_valid, output
    except Exception as e:
        return False, str(e)

def get_service_status():
    """
    Check if the tac_plus service (docker container) is running.
    Returns 'active', 'inactive', or 'unknown'.
    """
    try:
        # Check docker container status (named tac_plus)
        result = subprocess.run(['docker', 'inspect', '-f', '{{.State.Running}}', 'tac_plus'], capture_output=True, text=True)
        if result.returncode == 0:
            status_str = result.stdout.strip()
            if status_str == 'true':
                return 'active'
            else:
                return 'inactive'
        else:
            return 'unknown'
    except Exception:
        return 'unknown'
